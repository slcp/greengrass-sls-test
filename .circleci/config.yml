version: 2.1
jobs:
  get:
    docker:
      - image: python2.7-nodejs10
    working_directory: ~/repo/
    steps:
      - checkout:
          path: ~/repo
      # - restore_cache: # Restore modules from previous builds.
      #     keys:
      #       - node-modules-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: make dependencies
      - save_cache: # Cache modules between builds.
          paths:
            - ./node_modules
          key: node-modules-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - "*"
  get-python:
    docker:
      - image: python2.7-nodejs10
    working_directory: ~/repo/
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Install dependencies
          command: virtualenv -p python2.7 scanner_reader/venv && echo "source scanner_reader/venv/bin/activate" >> $BASH_ENV
      - run:
          name: Install dependencies
          command: pip install -r scanner_reader/requirements.txt
      - persist_to_workspace:
          root: ~/repo
          paths:
            - "*"
  deploy-serverless:
    docker:
      - image: python2.7-nodejs10
    working_directory: ~/repo/
    parameters:
      stage:
        type: string
        default: dev
    steps:
      - attach_workspace:
          at: ~/repo
      - deploy:
          name: Start << parameters.stage >> deployment
          command: make deploy-<< parameters.stage >>
  deploy-group:
    docker:
      - image: python2.7-nodejs10
    working_directory: ~/repo/
    parameters:
      stage:
        type: string
        default: dev
    steps:
      - attach_workspace:
          at: ~/repo
      - deploy:
          name: Start << parameters.stage >> deployment
          command: node deploy-group.js

workflows:
  version: 2.1
  build:
    jobs:
      - get
      - get-python:
          requires:
            - get
      - deploy-serverless:
          stage: dev
          requires:
            - get-python
          filters:
            branches:
              only:
                - master
      - deploy-group:
          stage: dev
          requires:
            - deploy-serverless
          filters:
            branches:
              only:
                - master
      # get latest group version using group name
      # deploy version - aws cli